generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id           String  @id @default(uuid()) @db.Uuid
  code         String
  name         String
  purity       String
  metal_type   Int // 1: Gold, 2: Silver, 3: Red Gold, 4: White Gold, 5: Platinum
  weight_tray  Decimal @db.Decimal
  weight_paper Decimal @db.Decimal
  description  String? @db.Text
  company_id   String  @db.Uuid

  types   Type[]
  company Company @relation(fields: [company_id], references: [id])
  stockOpnames StockOpname[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([deleted_at])
  @@map("categories")
}

model Type {
  id          String  @id @default(uuid()) @db.Uuid
  code        String
  name        String
  description String? @db.Text
  category_id String  @db.Uuid

  category Category  @relation(fields: [category_id], references: [id])
  products Product[]
  prices   Price[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([deleted_at])
  @@map("types")
}

model Product {
  id          String   @id @default(uuid()) @db.Uuid
  code        String
  name        String
  description String?  @db.Text
  images      String[] // multiple image for product
  status      Int // 0: Inactive, 1: Active, 2: Sold Out
  tags        String[]
  type_id     String   @db.Uuid
  store_id    String   @db.Uuid

  type          Type          @relation(fields: [type_id], references: [id])
  store         Store         @relation(fields: [store_id], references: [id])
  product_codes ProductCode[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([deleted_at])
  @@map("products")
}

model ProductCode {
  id           String    @id @default(uuid()) @db.Uuid
  barcode      String
  product_id   String    @db.Uuid
  weight       Decimal   @db.Decimal
  fixed_price   Decimal    @db.Decimal
  status       Int       @default(0) // 0: Available 1: Sold 2: Returned 3: Taken Out by the Owner
  taken_out_at DateTime?
  taken_out_reason Int  @default(0) // 0: none, 1: repair, 2: lost, 3: taken out by the owner
  taken_out_by String?   @db.Uuid
  buy_price    Decimal   @default(0) @db.Decimal
  tax_purchase Decimal   @default(0) @db.Decimal
  image        String?
  account_id   String?   @db.Uuid //account_id used when purchase product code

  product Product @relation(fields: [product_id], references: [id])
  StockOpnameDetails StockOpnameDetail[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([deleted_at])
  @@map("product_codes")
}

model Price {
  id        String   @id @default(uuid()) @db.Uuid
  price     Decimal  @db.Decimal
  is_active Boolean  @default(true)
  type_id   String   @db.Uuid
  date      DateTime

  type Type @relation(fields: [type_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([deleted_at])
  @@map("prices")
}

model Company {
  id       String  @id @default(uuid()) @db.Uuid
  name     String
  code     String
  owner_id String? @db.Uuid

  stores     Store[]
  categories Category[]
  accounts   Account[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([deleted_at])
  @@map("companies")
}

model Store {
  id             String  @id @default(uuid()) @db.Uuid
  code           String
  name           String
  is_active      Boolean @default(true)
  is_flex_price  Boolean @default(false)
  is_float_price Boolean @default(false)
  tax_percentage Decimal @default(11) @db.Decimal
  company_id     String  @db.Uuid

  company    Company     @relation(fields: [company_id], references: [id])
  products   Product[]
  operations Operation[]
  accounts   Account[]
  stockOpnames StockOpname[]

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([deleted_at])
  @@index([company_id])
  @@map("stores")
}

model Operation {
  id          String  @id @default(uuid()) @db.Uuid
  code        String
  name        String
  price       Decimal @db.Decimal
  uom         String
  description String? @db.Text
  store_id    String  @db.Uuid
  account_id  String? @db.Uuid

  store   Store    @relation(fields: [store_id], references: [id])
  account Account? @relation(fields: [account_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([deleted_at])
  @@map("operations")
}

model Account {
  id              String  @id @db.Uuid
  code            Int
  name            String
  account_type_id Int //  kas/bank/giro/piutang/hutang
  description     String?
  store_id        String? @db.Uuid
  company_id      String  @db.Uuid
  deactive        Boolean @default(false)

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  store     Store?      @relation(fields: [store_id], references: [id])
  company   Company     @relation(fields: [company_id], references: [id])
  operation Operation[]

  @@index([deleted_at])
  @@index([company_id])
  @@index([store_id])
  @@map("accounts")
}

model StockOpname {
  id         String  @id @default(uuid()) @db.Uuid
  store_id    String  @db.Uuid
  category_id String  @db.Uuid
  date        DateTime
  status      Int     @default(0) // 0: Draft, 1: Done
  description String? @db.Text
  approve Boolean @default(false)
  approve_by  String? @db.Uuid
  approve_at  DateTime?

  store   Store   @relation(fields: [store_id], references: [id])
  category Category @relation(fields: [category_id], references: [id])
  details StockOpnameDetail[]

  created_by  String? @db.Uuid
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([deleted_at])
  @@unique([store_id,category_id, date])
  @@map("stock_opnames")
}

model StockOpnameDetail {
  id            String  @id @default(uuid()) @db.Uuid
  stock_opname_id String  @db.Uuid
  product_code_id String  @db.Uuid
  description    String? @db.Text
  scanned       Boolean @default(false)

  stockOpname  StockOpname   @relation(fields: [stock_opname_id], references: [id], onDelete: Cascade)
  productCode ProductCode @relation(fields: [product_code_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@index([deleted_at])
  @@unique([stock_opname_id, product_code_id])
  @@map("stock_opname_details")
}